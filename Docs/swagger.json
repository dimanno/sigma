{
  "swagger": "2.0",
  "info": {
    "version": "1.1",
    "title": "Sigma test-task",
    "description": "Create REST API. Implement authorization and CRUD for users ",
    "contact": {
      "email": "dimanno.dev@gmail.com",
      "name": "Dmytro",
      "url": "https://github.com/dimanno"
    }
  },
  "host": "localhost:5005",
  "schemes": [
    "http"
  ],
  "paths": {
    "/auth": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "The user email for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "access_token": {
                  "type": "string"
                },
                "refresh_token": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email/password supplied"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/posts": {
      "post": {
        "tags": [
          "posts"
        ],
        "summary": "Create post",
        "description": "post object that needs to be added",
        "operationId": "add Post",
        "parameters": [
          {
            "in": "formData",
            "name": "text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Post was created",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PostBodyModels"
            }
          },
          "400": {
            "description": "Just an error",
            "schema": {
              "$ref": "#/definitions/commonErrors"
            }
          }
        },
        "security": [
          {
            "user_auth": [
              "write:posts"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get all posts",
        "operationId": "get posts",
        "responses": {
          "200": {
            "description": "All posts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PostBodyModels"
              }
            }
          },
          "400": {
            "description": "Just an error",
            "schema": {
              "$ref": "#/definitions/commonErrors"
            }
          }
        }
      }
    },
    "/posts/{userId}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get all posts by userId",
        "operationId": "get posts",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "All posts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PostBodyModels"
              }
            }
          },
          "400": {
            "description": "Just an error",
            "schema": {
              "$ref": "#/definitions/commonErrors"
            }
          }
        }
      }
    },
    "/posts/{userId}/{postId}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get post by userId",
        "operationId": "get post",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "postId",
            "in": "path",
            "description": "ID of post to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "All posts",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PostBodyModels"
            }
          },
          "400": {
            "description": "Just an error",
            "schema": {
              "$ref": "#/definitions/commonErrors"
            }
          }
        }
      }
    },
    "/posts/{postId}": {
      "put": {
        "tags": [
          "posts"
        ],
        "summary": "Update posts by id",
        "operationId": "update post",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "This is access-token from POST /auth",
            "required": true,
            "type": "string",
            "default": "token"
          },
          {
            "name": "postId",
            "in": "path",
            "description": "ID of post to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "post is updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PostBodyModels"
            }
          },
          "400": {
            "description": "Just an error",
            "schema": {
              "type": "string",
              "$ref": "#/definitions/commonErrors"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string",
              "$ref": "#/definitions/commonErrors"
            }
          }
        },
        "security": [
          {
            "user_auth": [
              "edit:posts"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "posts"
        ],
        "summary": "Delete post by id",
        "operationId": "delete post",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "This is access-token from POST /auth",
            "required": true,
            "type": "string",
            "default": "token"
          },
          {
            "name": "postId",
            "in": "path",
            "description": "ID of post to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "post was deleted"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "type": "string",
              "$ref": "#/definitions/commonErrors"
            }
          },
          "404": {
            "description": "Post not found",
            "schema": {
              "type": "string",
              "$ref": "#/definitions/commonErrors"
            }
          }
        },
        "security": [
          {
            "user_auth": [
              "delete:posts"
            ]
          }
        ]
      }
    },
    "/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create user",
        "description": "user object that needs to be added",
        "operationId": "addUser",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "This is `access-token` from POST /auth",
            "required": true,
            "type": "string",
            "default": "token"
          },
          {
            "in": "formData",
            "name": "email",
            "description": "User email",
            "required": true,
            "type": "string",
            "default": "name"
          },
          {
            "in": "formData",
            "name": "password",
            "description": "User password",
            "required": true,
            "type": "string",
            "default": "12345Az$"
          },
          {
            "in": "formData",
            "name": "name",
            "description": "User name",
            "required": true,
            "type": "string",
            "default": "admin@gmail.com"
          },
          {
            "in": "formData",
            "name": "age",
            "description": "User age",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "User was created",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UserBodyModels"
            }
          },
          "400": {
            "description": "Just an error",
            "schema": {
              "$ref": "#/definitions/commonErrors"
            }
          }
        },
        "security": [
          {
            "user_auth": [
              "write:users"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all users",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "All users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserBodyModels"
              }
            }
          },
          "400": {
            "description": "Just an error",
            "schema": {
              "$ref": "#/definitions/commonErrors"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user by id",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UserBodyModels"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "type": "string",
              "$ref": "#/definitions/commonErrors"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string",
              "$ref": "#/definitions/commonErrors"
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update user by id",
        "operationId": "updateUser",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "This is access-token from POST /auth",
            "required": true,
            "type": "string",
            "default": "token"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "user is updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UserBodyModels"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "type": "string",
              "$ref": "#/definitions/commonErrors"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string",
              "$ref": "#/definitions/commonErrors"
            }
          }
        },
        "security": [
          {
            "user_auth": [
              "edit:users"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user by id",
        "operationId": "deleteUser",
        "responses": {
          "200": {
            "description": "user was deleted"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "type": "string",
              "$ref": "#/definitions/commonErrors"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string",
              "$ref": "#/definitions/commonErrors"
            }
          }
        },
        "security": [
          {
            "user_auth": [
              "delete:users"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "PostBodyModels": {
      "properties": {
        "text": {
          "type": "string"
        },
        "_id": {
          "type": "string",
          "example": "12345qwerty",
          "description": "MongoDB ID"
        },
        "user_id": {
          "type": "string",
          "example": "12345qwerty",
          "description": "MongoDB ID of the user to whom the post belongs"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "date in UTC when post create"
        },
        "updatedAt": {
          "type": "string",
          "format": "date in UTC when post update"
        }
      }
    },
    "UserBodyModels": {
      "properties": {
        "_id": {
          "type": "string",
          "example": "12345qwerty",
          "description": "MongoDB ID"
        },
        "email": {
          "type": "string",
          "example": "admin@gmail.com"
        },
        "name": {
          "type": "string",
          "example": "admin"
        },
        "age": {
          "type": "number"
        }
      }
    },
    "commonErrors": {
      "properties": {
        "msg": {
          "type": "string",
          "example": "Something went wrong"
        },
        "code": {
          "type": "number",
          "example": 400
        }
      }
    }
  }
}
